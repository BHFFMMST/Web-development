{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Uvod","text":"<p>MMST Web development radionica je namijenjena svim osobama koje \u017eele da se upoznaju sa kreiranjem stati\u010dkih web stranica.</p> <p>U zadnjih dvadesetak godina Web stranice su jedan od glavnih na\u010dina digitalne komunikacije. Za razliku od standardnih medija, Web nudi mogu\u0107nost objave sadr\u017eaja i to na jednostavan na\u010din.</p> <p>Preporu\u010deno prethodno znanje za ovu radionicu su razumijevanje:</p> <ul> <li>\u0160ta je internet pretra\u017eiva\u010d</li> <li>Kori\u0161tenje pretra\u017eiva\u010da</li> <li>Poznavanje osnova rada na ra\u010dunaru (kreiranje, izmjene i brisanje datoteka)</li> </ul> <p>Kroz ovu radionicu \u0107ete nau\u010diti kori\u0161tenje raznih opcija za kreiranje i ure\u0111ivanje web stranica, kao i njihovih elemenata na moderan na\u010din, pored \u010dega \u0107ete imati priliku nau\u010diti pisati uredan, jednostavan kod.</p>"},{"location":"#bhff-mobile-makerspace-team","title":"BHFF Mobile Makerspace Team","text":"<p>MMST tim je jedan od mnogih timova unutar BHFF-a. Primarno smo zadu\u017eeni za dvije stvari:</p> <ul> <li>preno\u0161enje direktnog tehni\u010dkog znanja sa BHFF scholara na studente i \u0161kolarce \u0161irom BiH</li> <li>primarni outreach fondacije gdje se kroz na\u0161e radionice novi ljudi upoznavaju sa benefitima fondacije</li> </ul>"},{"location":"content/basics/","title":"Osnovni koncepti","text":""},{"location":"content/basics/#sta-je-to-web","title":"\u0160ta je to WEB?","text":"<p>Prije nego \u0161to pre\u0111emo na samu radionicu , potrebno je izdvojiti nekoliko rije\u010di o klju\u010dnoj stvari ovdje bez \u010dega ni\u0161ta od ovog ne bi bilo mogu\u0107e \u2013 o samom internetu.  Internet je velika ra\u010dunarska mre\u017ea i sistem za jednostavnu i efektivnu komunikaciju sa tekstom, slikom i zvukom. Neki od najpopularnijih dijelova interneta su: World Wide Web, E-mail, razmjena dokumenata i sl. Koristimo ga vi\u0161e nego ikad prije, na mjestima gdje mo\u017eda i ne vidimo odmah, jer je internet vi\u0161e od Web stranica koje posje\u0107ujemo uno\u0161enjem URL-a u internet pretra\u017eiva\u010d; da li je to provjeravanje email-a na tvom telefonu ili objavljivanje slike na Instagramu \u2013 ti koristi\u0161 internet.</p>"},{"location":"content/basics/#literatura-i-dodatni-materijali","title":"Literatura i dodatni materijali","text":"<p>Dodatni materijali</p>"},{"location":"content/basics/resources/","title":"Dodatni materijali i reference","text":""},{"location":"content/intermediate/","title":"Napredni koncepti","text":""},{"location":"content/intermediate/#cilj","title":"Cilj","text":"<p>Cilj naprednih koncepata je pro\u0161iriti razumijevanje JavaScripta i upoznati se s slo\u017eenijim konceptima i praksama u razvoju web aplikacija.</p>"},{"location":"content/intermediate/#uslovi","title":"Uslovi","text":"<p>Radno okru\u017eenje</p>"},{"location":"content/intermediate/#literatura-i-dodatni-materijali","title":"Literatura i dodatni materijali","text":"<p>Dodatni materijali</p>"},{"location":"content/intermediate/resources/","title":"Dodatni materijali i reference","text":"<ul> <li>https://www.w3schools.com/js/</li> <li>https://www.mojwebdizajn.net/web-programiranje/vodic/javascript/uvod-u-javascript.php</li> </ul>"},{"location":"content/intermediate/setup/","title":"Instalacija i okru\u017eenje","text":""},{"location":"content/intermediate/setup/#instalacija-nodejs-paketa","title":"Instalacija Node.js paketa","text":"<p>Node.js je klju\u010dno okru\u017eenje za izvo\u0111enje JavaScript koda izvan web preglednika. Instalacija Node.js-a je jednostavan proces koji uklju\u010duje preuzimanje i instalaciju odgovaraju\u0107e verzije prema operativnom sustavu koji koristite. Prvo, posjetite slu\u017ebenu web stranicu Node.js-a i preuzmite instalacijski program. Zatim pokrenite instalaciju, slijede\u0107i korake u instalacijskom \u010darobnjaku. Nakon \u0161to instalacija zavr\u0161i, mo\u017eete provjeriti je li Node.js uspje\u0161no instaliran tako \u0161to \u0107ete otvoriti naredbeni redak i unijeti naredbu node -v. Ako vidite verziju Node.js-a, to zna\u010di da je instalacija uspje\u0161na.</p> <pre><code>$ node -v\nv14.17.0\n</code></pre>"},{"location":"content/intermediate/setup/#pokretanje-js-datoteke","title":"Pokretanje .js datoteke","text":"<p>Kada imate Node.js instaliran, mo\u017eete izvr\u0161avati JavaScript datoteke iz naredbenog retka. Da biste to u\u010dinili, otvorite terminal, navigirajte do direktorija gdje se nalazi va\u0161a JavaScript datoteka, a zatim izvr\u0161ite naredbu <code>node ime_datoteke.js</code>.</p> <p>Na primjer, ako imate datoteku naziva <code>script.js</code>, naredba bi izgledala ovako: <code>node script.js</code>. Node.js \u0107e izvr\u0161iti kod iz va\u0161e datoteke i prikazati izlaz u terminalu.</p>"},{"location":"content/intermediate/funkcije/","title":"Funkcije","text":""},{"location":"content/intermediate/funkcije/#funkcije-u-javascriptu","title":"Funkcije u JavaScriptu","text":"<p>Funkcije su blokovi koda dizajnirani za izvr\u0161avanje specifi\u010dnih zadataka. Funkcije se izvr\u0161avaju kada ih neko pozove (poziva).</p>"},{"location":"content/intermediate/funkcije/#sintaksa-funkcija","title":"Sintaksa Funkcija","text":"<p>Definira se pomo\u0107u klju\u010dne rije\u010di <code>function</code>, nakon \u010dega slijedi naziv funkcije, a zatim zagrada s parametrom <code>( )</code>. Parametri se mogu koristiti unutar funkcije kao lokalne varijable.</p> <pre><code>function greeting(name) {\n  return \"Hello, \" + name;\n}\n</code></pre>"},{"location":"content/intermediate/funkcije/#pozivanje-funkcije","title":"Pozivanje Funkcije","text":"<p>Kod unutar funkcije se izvr\u0161ava kada se funkcija pozove. Pozivanje mo\u017ee biti automatsko, odgovor na doga\u0111aj (npr. korisnik klikne gumb) ili direktno iz JavaScript koda.</p> <pre><code>greeting(\"Alice\"); // Izvr\u0161avanje funkcije i vra\u0107anje rezultata\n</code></pre>"},{"location":"content/intermediate/funkcije/#povratna-vrijednost","title":"Povratna Vrijednost","text":"<p>Kada JavaScript do\u0111e do naredbe <code>return</code>, funkcija prestaje s izvr\u0161avanjem. Vrijednost koju funkcija vra\u0107a se naziva povratnom vrijedno\u0161\u0107u i mo\u017ee se koristiti negdje drugdje u kodu.</p> <pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet sum = add(1,  2); // sum sada ima vrijednost  3\n</code></pre>"},{"location":"content/intermediate/funkcije/#funkcije-kao-varijable","title":"Funkcije Kao Varijable","text":"<p>Funkcije mogu biti kori\u0161tene na isti na\u010din kao i varijable, u svim tipovima formula, dodjeljivanja i izra\u010duna.</p>"},{"location":"content/intermediate/funkcije/#lokalne-varijable","title":"Lokalne Varijable","text":"<p>Varijable deklarirane unutar JavaScript funkcije postaju lokalne za tu funkciju. Lokalne varijable mogu se pristupiti samo unutar te funkcije.</p>"},{"location":"content/intermediate/funkcije/#konstruktor-funkcija","title":"Konstruktor Funkcija","text":"<p>Funkcije mogu biti definirane i pomo\u0107u ugra\u0111enog JavaScript konstruktora funkcija nazvanog <code>Function()</code>.</p> <pre><code>let multiply = new Function('a', 'b', 'return a * b');\nlet product = multiply(4,  5); // product sada ima vrijednost  20\n</code></pre>"},{"location":"content/intermediate/funkcije/#hoisting-funkcija","title":"Hoisting Funkcija","text":"<p>Zbog hoistinga (potezanja), JavaScript funkcije mogu biti pozvane prije nego \u0161to su deklarirane.</p> <pre><code>result = square(5); // Isprinta  25\n\nfunction square(number) {\n  return number * number;\n}\n</code></pre>"},{"location":"content/intermediate/funkcije/#arrow-funkcije","title":"Arrow Funkcije","text":"<p>Arrow funkcije omogu\u0107uju kra\u0107u sintaksu za pisanje izraza funkcija. Ne morate koristiti klju\u010dnu rije\u010d <code>function</code>, klju\u010dnu rije\u010d <code>return</code>, ni zagrade <code>{}</code>.</p> <pre><code>const add = (a, b) =&gt; a + b;\nlet sum = add(1,  2); // sum sada ima vrijednost  3\n</code></pre>"},{"location":"content/intermediate/funkcije/#argumenti-i-parametri","title":"Argumenti i Parametri","text":"<p>Funkcije u JavaScriptu ne provjeravaju vrijednosti parametara. Argumenti su stvarne vrijednosti koje funkcija prima kada je pozvana. Unutar funkcije, argumenti se koriste kao lokalne varijable.</p> <p>Funkcije su sredi\u0161te modularnog programiranja i omogu\u0107uju ponovno kori\u0161tenje koda, pojednostavljuju odr\u017eavanje i pobolj\u0161avaju \u010ditljivost koda.</p>"},{"location":"content/intermediate/grananje/","title":"Naredbe grananja","text":"<p>U skriptnom jeziku JavaScript postoje vi\u0161e naredbi grananja:</p> Naredba grananja Opis if naredba Koristi se za izvo\u0111enje razli\u010ditih akcija ovisno je li zadani uvjet ispunjen ili nije. if...else naredba Omogu\u0107ava ve\u0107i nadzor nad izvo\u0111enjem ovisno o vrijednosti izraza. if...else if naredba Omogu\u0107ava izvo\u0111enje razli\u010ditih dijelova koda ovisno o vi\u0161e uvjeta."},{"location":"content/intermediate/grananje/#if-naredba-if-statement","title":"if naredba : if Statement","text":"<p>Kao i za ve\u0107inu programskih jezika, i JavaScript ima na raspolaganju naredbu uvjeta (if naredbu) koja se koristi za izvo\u0111enje razli\u010ditih akcija ovisno o tome je li zadani uvjet ispunjen ili nije.</p> <p>Sintaksa if naredbe:</p> <pre><code>if (izraz) {\n    //if blok naredbi koje se izvr\u0161avaju samo ako je uvjet true;\n}\n</code></pre> <p>Kod ove naredbe najprije se izra\u010dunava vrijednost izraza u zagradi. Ako je rezultat <code>true</code>, izvode se sve naredbe unutar viti\u010dastih zagrada. Ako je vrijednost <code>false</code>, niti jedna naredba se ne\u0107e izvr\u0161iti. Unutar izraza u zagradi \u010desto se koristi operator usporedbe. Naprimjer:</p> <pre><code>var godina = 20;\nif( godina &gt; 18 ){\n    document.write(\"&lt;strong&gt;Punoljetna osoba.&lt;/strong&gt;\");\n}\n</code></pre> <p>Budu\u0107i da je vrijednost varijable godina ve\u0107a od 18, metoda <code>document.write</code> upisuje HTML kod:</p> <pre><code>&lt;strong&gt;Punoljetna osoba.&lt;/strong&gt;\n</code></pre>"},{"location":"content/intermediate/grananje/#ifelse-naredba-ifelse-statement","title":"if...else naredba : if...else Statement","text":"<p>if...else naredba omogu\u0107ava ve\u0107i nadzor nad izvo\u0111enjem ovisno o vrijednosti izraza.</p> <p>Sintaksa if...else naredbe:</p> <pre><code>if (izraz) {\n    // naredbe koje \u0107e se izvr\u0161iti ako je vrijednost izraza true;\n} else {\n    // naredbe koje \u0107e se izvr\u0161iti ako je vrijednost izraza false;\n}\n</code></pre> <p>Kod ove naredbe najprije se izra\u010dunava vrijednost izraza u zagradi. Ako je rezultat <code>true</code>, izvode se sve naredbe unutar viti\u010dastih zagrada nakon naredbe <code>if</code>. Ako je vrijednost <code>false</code>, izvode se sve naredbe unutar viti\u010dastih zagrada nakon naredbe <code>else</code>. Naprimjer:</p> <pre><code>var godina = 15;\nif( godina &gt; 18 ){\n    document.write(\"&lt;strong&gt;Punoljetna osoba.&lt;/strong&gt;\");\n} else {\n    document.write(\"&lt;strong&gt;Maloljetna osoba.&lt;/strong&gt;\");\n}\n</code></pre> <p>Budu\u0107i da je vrijednost varijable godina manja od 18, metoda <code>document.write</code> upisuje HTML kod:</p> <pre><code>&lt;strong&gt;Maloljetna osoba.&lt;/strong&gt;\n</code></pre>"},{"location":"content/intermediate/grananje/#ifelse-if-naredba-ifelse-if-statement","title":"if...else if naredba : if...else if Statement","text":"<p>if...else if naredba omogu\u0107ava izvo\u0111enje razli\u010ditih dijelova koda ovisno o vi\u0161e uvjeta.</p> <p>Sintaksa if...else if naredbe:</p> <pre><code>if (izraz1) {\n    // naredbe koje \u0107e se izvr\u0161iti ako je vrijednost izraza true;\n} else if (izraz2) {\n    // naredbe koje \u0107e se izvr\u0161iti ako je vrijednost izraza 2 true;\n} else if (izraz3) {\n    // naredbe koje \u0107e se izvr\u0161iti ako je vrijednost izraza 3 true;\n} else {\n    // naredbe koje \u0107e se izvr\u0161iti ako su i izraz1, izraz2 i izraz3 false;\n}\n</code></pre> <p>Niz if naredbi, svaki slijede\u0107i <code>if</code> je dio else prethodne naredbe. <code>if</code> i <code>else if</code> dolaze u parovima. Prva naredba <code>else if</code> ispituje uvjet samo ako je izraz1 <code>false</code>. Ako je izraz1 <code>true</code>, niti jedna od preostalih naredbi <code>else if</code> se ne ispituje. Ako je izraz1 <code>false</code>, ispituje se izraz2, i tako dalje. Naprimjer:</p> <pre><code>var info = \"javascript\";\nif( info == \"html\" ){\n    document.write(\"&lt;strong&gt;Vodi\u010d kroz HTML&lt;/strong&gt;\");\n} else if( info == \"css\" ){\n    document.write(\"&lt;strong&gt;Vodi\u010d kroz CSS&lt;/strong&gt;\");\n} else if( info == \"javascript\" ){\n    document.write(\"&lt;strong&gt;JavaScript vodi\u010d&lt;/strong&gt;\");\n} else {\n    document.write(\"&lt;strong&gt;Nepostoje\u0107i vodi\u010d&lt;/strong&gt;\");\n}\n</code></pre> <p>Kao rezultat ovog primjera, <code>document.write</code> \u0107e upisati na web stranicu sljede\u0107i HTML kod:</p> <pre><code>&lt;strong&gt;JavaScript vodi\u010d.&lt;/strong&gt;\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/","title":"Iteracija niza","text":""},{"location":"content/intermediate/iteracija%20niza/#iteracija-nizova","title":"Iteracija Nizova","text":"<p>JavaScript nudi razne metode za iteraciju nad nizovima. Ove metode omogu\u0107uju prolazak kroz svaki element niza i primjenu funkcija na njima.</p>"},{"location":"content/intermediate/iteracija%20niza/#metode-iteracije-nizova","title":"Metode Iteracije Nizova","text":""},{"location":"content/intermediate/iteracija%20niza/#array-foreach","title":"Array forEach()","text":"<p>Izvr\u0161ava funkciju za svaki element niza, bez vra\u0107anja nikakve vrijednosti [0][1][3].</p> <pre><code>const fruits = [\"apple\", \"orange\", \"cherry\"];\n\nfruits.forEach(function(item, index, array) {\n  console.log(item, index);\n});\n// apple  0\n// orange  1\n// cherry  2\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-map","title":"Array map()","text":"<p>Stvara novi niz s rezultatima funkcije provedenih na svakom elementu niza.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst squares = numbers.map(x =&gt; x * x);\n// squares: [1,  4,  9,  16]\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-flatmap","title":"Array flatMap()","text":"<p>Prvo mapa sve elemente niza, a zatim stvori novi niz tako \u0161to spaja elemente.</p> <pre><code>const nestedNumbers = [[1], [2,  3], [4,  5,  6]];\nconst flattenedNumbers = nestedNumbers.flatMap(x =&gt; x);\n// flattenedNumbers: [1,  2,  3,  4,  5,  6]\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-filter","title":"Array filter()","text":"<p>Stvara novi niz koji sadr\u017ei elemente niza koji prolaze test.</p> <pre><code>const numbers = [1,  2,  3,  4,  5];\nconst evens = numbers.filter(x =&gt; x %  2 ===  0);\n// evens: [2,  4]\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-reduce","title":"Array reduce()","text":"<p>Primjenjuje funkciju na svaki element niza da bi stvorio jednu kona\u010dnu vrijednost.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator + currentValue,  0);\n// sum:  10\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-reduceright","title":"Array reduceRight()","text":"<p>Radi sli\u010dno kao <code>reduce()</code>, ali po\u010dinje s desne strane niza.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst sum = numbers.reduceRight((accumulator, currentValue) =&gt; accumulator + currentValue,  0);\n// sum:  10\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-every","title":"Array every()","text":"<p>Provjerava da li svi elementi niza prolaze test.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst allArePositive = numbers.every(x =&gt; x &gt;  0);\n// allArePositive: true\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-some","title":"Array some()","text":"<p>Provjerava da li barem jedan element niza prolazi test.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst hasNegativeNumber = numbers.some(x =&gt; x &lt;  0);\n// hasNegativeNumber: false\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-from","title":"Array from()","text":"<p>Kreira niz iz iterabilnog objekta.</p> <pre><code>const string = 'hello';\nconst arrayFromString = Array.from(string);\n// arrayFromString: ['h', 'e', 'l', 'l', 'o']\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-keys","title":"Array keys()","text":"<p>Vra\u0107a <code>Array Iterator</code> objekt koji sadr\u017ei klju\u010deve originalnog niza.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst iterator = numbers.keys();\n// iterator: ArrayIterator {}\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-entries","title":"Array entries()","text":"<p>Vra\u0107a <code>Array Iterator</code> objekt koji sadr\u017ei parove klju\u010d-vrijednost originalnog niza.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst iterator = numbers.entries();\n// iterator: ArrayIterator {}\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-with","title":"Array with()","text":"<p>Napravi novi niz s a\u017euriranim elementima bez mijenjanja originalnog niza.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst newNumbers = numbers.with(0,  10);\n// newNumbers: [10,  2,  3,  4]\n</code></pre>"},{"location":"content/intermediate/iteracija%20niza/#array-spread","title":"Array Spread (...)","text":"<p>Operator pro\u0161iruje iterabilne objekte, poput nizova, u vi\u0161e elemenata.</p> <pre><code>const numbers = [1,  2,  3,  4];\nconst spreadNumbers = [...numbers,  5];\n// spreadNumbers: [1,  2,  3,  4,  5]\n</code></pre> <pre><code>\n</code></pre>"},{"location":"content/intermediate/niz%20-%20metode/","title":"Niz","text":""},{"location":"content/intermediate/niz%20-%20metode/#arrays","title":"Arrays","text":"<p>Arrays su strukture podataka koje omogu\u0107uju pohranjivanje i manipulaciju vi\u0161e vrijednosti u JavaScriptu. Mogu\u0107e je definirati array koriste\u0107i <code>new Array</code> konstruktor ili jednostavno sintaksom <code>[]</code>.</p>"},{"location":"content/intermediate/niz%20-%20metode/#metode-arrays","title":"Metode Arrays","text":""},{"location":"content/intermediate/niz%20-%20metode/#metode-arrays_1","title":"Metode Arrays","text":""},{"location":"content/intermediate/niz%20-%20metode/#push","title":".push()","text":"<p>Dodaje jedan ili vi\u0161e elemenata na kraj arraya i vra\u0107a novu du\u017einu arraya.</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfruits.push('grape'); // ['apple', 'banana', 'orange', 'grape']\n</code></pre>"},{"location":"content/intermediate/niz%20-%20metode/#unshift","title":".unshift()","text":"<p>Dodaje jedan ili vi\u0161e elemenata na po\u010detak arraya i vra\u0107a novu du\u017einu arraya.</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nfruits.unshift('grape'); // ['grape', 'apple', 'banana', 'orange']\n</code></pre>"},{"location":"content/intermediate/niz%20-%20metode/#pop","title":".pop()","text":"<p>Uklanja posljednji element iz arraya i vra\u0107a taj element.</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nlet lastFruit = fruits.pop(); // 'orange'\n</code></pre>"},{"location":"content/intermediate/niz%20-%20metode/#indexof","title":".indexOf()","text":"<p>Vra\u0107a indeks prvog pojavljivanja odre\u0111enog elementa u arrayu. Ako element nije prona\u0111en, vra\u0107a -1.</p> <pre><code>let fruits = ['apple', 'banana', 'orange'];\nlet index = fruits.indexOf('banana'); // 1\n</code></pre> <p>Arrays u JavaScriptu su fleksibilni i mo\u0107ni alati za rad s podacima. Mogu se koristiti za pohranjivanje razli\u010ditih tipova podataka i manipulaciju njima putem raznih metoda i operatora.</p>"},{"location":"content/intermediate/objekti/","title":"Objekti","text":""},{"location":"content/intermediate/objekti/#objekti-u-javascriptu","title":"Objekti u JavaScriptu","text":"<p>Objekti u JavaScriptu su strukture koje omogu\u0107uju grupiranje podataka u parove klju\u010d-vrijednost. Klju\u010devi su nizovi, a vrijednosti mogu biti bilo koja vrsta podataka, uklju\u010duju\u0107i funkcije, koje se \u010desto nazivaju metodama objekta.</p>"},{"location":"content/intermediate/objekti/#definicija-objekta","title":"Definicija Objekta","text":"<p>Objekti se definiraju kao skupovi parova klju\u010d-vrijednost unutar zagradi <code>{ }</code>.</p> <pre><code>const car = {\n  make: \"Toyota\",\n  model: \"Corolla\",\n  year:  2005,\n  color: \"blue\",\n  displayCar: function() {\n    return this.make + \" \" + this.model;\n  }\n};\n</code></pre>"},{"location":"content/intermediate/objekti/#pristupanje-svojstvima-objekta","title":"Pristupanje Svojstvima Objekta","text":"<p>Svojstvima objekta pristupa se koriste\u0107i notaciju ta\u010dka ili notaciju kvadratnih zagradi.</p> <pre><code>console.log(car.make); // Ispisuje \"Toyota\"\nconsole.log(car['year']); // Ispisuje  2005\n</code></pre>"},{"location":"content/intermediate/objekti/#metode-objekta","title":"Metode Objekta","text":"<p>Metode objekta su funkcije koje su svojstva objekta. Metode se mogu pozvati koriste\u0107i notaciju ta\u010dka ili notaciju kvadratnih zagradi.</p> <pre><code>console.log(car.displayCar()); // Ispisuje \"Toyota Corolla\"\n</code></pre>"},{"location":"content/intermediate/objekti/#pridruzivanje-svojstava-objektima","title":"Pridru\u017eivanje Svojstava Objektima","text":"<p>Svojstva se mogu dodati objektima nakon njihovog stvaranja.</p> <pre><code>car.speed = \"fast\";\nconsole.log(car.speed); // Ispisuje \"fast\"\n</code></pre>"},{"location":"content/intermediate/objekti/#iteriranje-preko-svojstava-objekta","title":"Iteriranje Preko Svojstava Objekta","text":"<p>Petlja <code>for...in</code> se mo\u017ee koristiti za iteraciju preko svih svojstava objekta.</p> <pre><code>for (let key in car) {\n  console.log(key + \": \" + car[key]);\n}\n</code></pre>"},{"location":"content/intermediate/objekti/#prototip-objekta","title":"Prototip Objekta","text":"<p>Svi objekti naslje\u0111uju svojstva od prototipa. Promjena prototipa objekta utje\u010de na sve objekte koji naslje\u0111uju od tog prototipa.</p> <pre><code>function Car(make, model, year) {\n  this.make = make;\n  this.model = model;\n  this.year = year;\n}\n\nconst myCar = new Car(\"Ford\", \"Mustang\",  1969);\nconsole.log(myCar.make); // Ispisuje \"Ford\"\n</code></pre>"},{"location":"content/intermediate/objekti/#objekti-i-povratne-vrijednosti","title":"Objekti i Povratne Vrijednosti","text":"<p>Objekti su mutable, \u0161to zna\u010di da se mogu mijenjati nakon \u0161to su stvoreni. Kada se objekt proslijedi funkciji, proslijeduje se referenca na objekt, a ne kopija objekta.</p>"},{"location":"content/intermediate/objekti/#kljucne-rijeci-this","title":"Klju\u010dne Rije\u010di <code>this</code>","text":"<p>Unutar metoda objekta, klju\u010dna rije\u010d <code>this</code> se odnosi na objekt na kojem se metoda poziva.</p> <p>Objekti su klju\u010dni dio JavaScripta i omogu\u0107uju strukturiranje podataka na slo\u017eenije na\u010dine od jednostavnih nizova i brojeva.</p>"},{"location":"content/intermediate/operatori/","title":"Operatori","text":"<p>Operatori u JavaScriptu su simboli koji predstavljaju odre\u0111ene operacije te povezuju jedan ili vi\u0161e operanada u jedan izraz, bilo da je rije\u010d o aritmeti\u010dkim, logi\u010dkim ili drugim operacijama.</p> <p>Ovisno o broju operanada koje operator povezuje, razlikujemo unarne, binarne ili ternarne operatore.</p>"},{"location":"content/intermediate/operatori/#operatori-dodjeljivanja","title":"Operatori dodjeljivanja","text":"<p>Vrijednost varijabli se dodjeljuje kori\u0161tenjem operatora dodjeljivanja. Naj\u010de\u0161\u0107i operator dodjeljivanja je znak jednako <code>=</code>. Operator dodjeljivanja mo\u017ee se pisati zajedno s binarnim aritmeti\u010dkim operatorima. Primjerice, operator dodjeljivanja zbroja je <code>+=</code>, \u0161to je istovjetno s <code>x = x + y</code>.</p> <pre><code>var x = 10;\nvar y = 5;\nx += y; // x sada ima vrijednost 15 (x = x + y)\n</code></pre> <p>Tablica operatora usporedbe:</p> Operator Opis = Dodjeljuje vrijednost varijable ili izraza s desne strane varijabli s lijeve strane (x = y;) += Zbraja dvije varijable i dodjeljuje zbroj varijabli s lijeve strane -= Oduzima dvije varijable i dodjeljuje razliku varijabli s lijeve strane *= Mno\u017ei dvije varijable i dodjeljuje umno\u017eak varijabli s lijeve strane /= Dijeli dvije varijable i dodjeljuje kvocijent varijabli s lijeve strane %= Cjelobrono dijeli dvije varijable i dodjeljuje ostatak od dijeljenja varijabli s lijeve strane"},{"location":"content/intermediate/operatori/#logicki-operatori","title":"Logi\u010dki operatori","text":"<p>Logi\u010dki operatori povezuju dva ili vi\u0161e logi\u010dkih izraza i vra\u0107aju ovisno o vrijednosti logi\u010dkih izraza <code>true</code> ili <code>false</code>.</p> Operator Opis &amp;&amp; Logi\u010dki AND vra\u0107a vrijednost true ako su oba izraza true || Logi\u010dki OR vra\u0107a vrijednost true ako je barem jedan izraz true ! Logi\u010dki NOT vra\u0107a vrijednost true ako je izraz false odnosno false ako je izraz true"},{"location":"content/intermediate/operatori/#uvjetni-operator","title":"Uvjetni operator","text":"<p>Uvjetni operator ispituje je li uvjet ispunjen (vrijednost <code>true</code>) i ako je dodjeljuje vrijednost iza upitnika, a ako nije ispunjen vra\u0107a vrijednost iza dvota\u010dke. Naprimjer:</p> <pre><code>let email = \"Da\";\nlet poruka = (email == \"Da\") ? \"Primio si po\u0161tu.\" : \"Nema po\u0161te.\";\n</code></pre> <p>U ovom primjeru, ako je vrijednost varijable <code>email</code> jednaka \"Da\", varijabli <code>poruka</code> \u0107e biti dodijeljena vrijednost \"Primio si po\u0161tu.\". U suprotnom, bit \u0107e dodijeljena vrijednost \"Nema po\u0161te.\"</p>"},{"location":"content/intermediate/osnove/","title":"Osnove programiranja u JavaScriptu","text":""},{"location":"content/intermediate/osnove/#kreiranje-naseg-prvog-programa","title":"Kreiranje na\u0161eg prvog programa","text":"<p>Kreiranje prvog JavaScript programa je jednostavan korak koji vam omogu\u0107uje upoznavanje s osnovnim sintaksama jezika. Mo\u017eete otvoriti svoj omiljeni tekstualni ure\u0111iva\u010d i stvoriti novu datoteku s <code>.js</code> ekstenzijom. Na primjer, stvorite datoteku <code>hello.js</code>. Zatim unesite osnovni JavaScript kod unutar te datoteke, kao \u0161to je <code>console.log(\"Hello, world!\");</code>. Spremite datoteku i izvr\u0161ite je koriste\u0107i Node.js. To \u0107e ispisati \"Hello, world!\" u va\u0161em terminalu ili konzoli.</p> <pre><code>// hello.js\nconsole.log(\"Hello, world!\");\n</code></pre>"},{"location":"content/intermediate/osnove/#varijable","title":"Varijable","text":"<p>Varijable su temeljna gra\u0111evna blokova svakog programske jezika.</p>"},{"location":"content/intermediate/osnove/#kreiranje-varijabli-let-i-const","title":"Kreiranje varijabli (let i const)","text":"<p>Deklariranje varijabli je klju\u010dni koncept u programiranju, a u JavaScriptu imamo nekoliko na\u010dina kako to mo\u017eemo u\u010diniti. Kori\u0161tenje <code>let</code> i <code>const</code> klju\u010dnih rije\u010di omogu\u0107uje nam deklariranje varijabli s razli\u010ditim svojstvima. <code>let</code> se koristi za deklariranje promjenjivih vrijednosti, \u0161to zna\u010di da vrijednost varijable mo\u017ee kasnije biti promijenjena. S druge strane, <code>const</code> se koristi za deklariranje konstanti, \u0161to zna\u010di da se vrijednost varijable ne mo\u017ee mijenjati nakon inicijalne dodjele. Primjerice, <code>let x = 5;</code> stvara promjenjivu varijablu x, dok <code>const y = 10;</code> stvara konstantu <code>y</code>. Kori\u0161tenje odgovaraju\u0107e deklaracije varijabli va\u017eno je za pravilno upravljanje podacima i o\u010duvanje konzistentnosti u na\u0161em programu.</p> <pre><code>let x = 5;\nconst y = 10;\n\nx = 7; // Ovo je dozvoljeno jer je x deklariran s let\ny = 12; // Ovo \u0107e rezultirati gre\u0161kom jer se poku\u0161ava promijeniti vrijednost konstante y\n</code></pre>"},{"location":"content/intermediate/osnove/#tipovi-varijabli","title":"Tipovi varijabli","text":"<p>U JavaScriptu, varijable mogu sadr\u017eavati razli\u010dite tipove podataka, uklju\u010duju\u0107i stringove, brojeve, boolean vrijednosti, nizove, objekte, funkcije, null i undefined. JavaScript je dinami\u010dki tipizirani jezik, \u0161to zna\u010di da tip varijable nije fiksiran i mo\u017ee se automatski mijenjati tijekom izvo\u0111enja programa. Na primjer, varijabla koja je inicijalno deklarirana kao string mo\u017ee kasnije postati broj. Ova fleksibilnost omogu\u0107ava programerima da brzo reagiraju na promjene i dinami\u010dki manipuliraju podacima. Razumijevanje razli\u010ditih tipova varijabli klju\u010dno je za uspje\u0161no rukovanje podacima u JavaScriptu i sprje\u010davanje gre\u0161aka tijekom izvr\u0161enja programa.</p> <pre><code>let name = \"John\";\nlet age = 30;\nlet isMale = true;\nlet hobbies = [\"reading\", \"swimming\", \"cooking\"];\nlet person = { name: \"Alice\", age: 25 };\n\nconsole.log(typeof name); // string\nconsole.log(typeof age); // number\nconsole.log(typeof isMale); // boolean\nconsole.log(typeof hobbies); // object (niz se smatra objektom)\nconsole.log(typeof person); // object\n</code></pre>"},{"location":"content/intermediate/osnove/#da-li-je-javascript-strongly-ili-weakly-type-jezik","title":"Da li je JavaScript strongly ili weakly type jezik?","text":"<p>Pitanje o tome je li JavaScript strongly ili weakly type jezik \u010desto izaziva rasprave i nejasno\u0107e. Razumijevanje ove karakteristike je bitno za pravilno kori\u0161tenje jezika. JavaScript se op\u0107enito smatra weakly typed jezikom zbog svoje fleksibilnosti u automatskom pretvaranju tipova podataka tijekom izvr\u0161avanja programa. To zna\u010di da JavaScript dopu\u0161ta operacije me\u0111u razli\u010ditim tipovima podataka bez eksplicitne konverzije. Na primjer, mo\u017eemo dodavati brojeve i stringove bez posebne konverzije tipova. Ova fleksibilnost mo\u017ee biti korisna, ali istovremeno mo\u017ee dovesti do neo\u010dekivanih rezultata ako se ne upravlja pa\u017eljivo.</p> <p>S druge strane, JavaScript tako\u0111er pokazuje neke karakteristike strongly typed jezika. Na primjer, kada koristimo strogu usporedbu operatorom <code>===</code>, JavaScript provjerava i tipove i vrijednosti varijabli. Ako tipovi nisu isti, usporedba \u0107e biti false. To pokazuje da JavaScript mo\u017ee imati i aspekte strongly typed jezika, gdje su tipovi varijabli va\u017eni prilikom provo\u0111enja operacija.</p> <p>Razumijevanje ove dvojnosti je klju\u010dno za efikasno programiranje u JavaScriptu. Programerima omogu\u0107uje da iskoriste fleksibilnost jezika, ali istovremeno ih upozorava na potencijalne zamke prilikom manipulacije podacima i provo\u0111enja operacija. Kao rezultat toga, programeri bi trebali biti svjesni i razumjeti kako JavaScript tretira tipove podataka kako bi izbjegli gre\u0161ke i ne\u017eeljene rezultate.</p>"},{"location":"content/intermediate/petlje/","title":"Petlje","text":""},{"location":"content/intermediate/petlje/#petlje-u-javascriptu","title":"Petlje u JavaScriptu","text":"<p>Petlje su korisne kada \u017eelite ponovno pokrenuti isti kod, svaki put s drugom vrijedno\u0161\u0107u. JavaScript nudi razli\u010dite vrste petlji za rukovanje razli\u010ditim situacijama.</p>"},{"location":"content/intermediate/petlje/#vrste-petlji","title":"Vrste Petlji","text":""},{"location":"content/intermediate/petlje/#for-loop","title":"For Loop","text":"<p>Petlja <code>for</code> prolazi kroz blok koda odre\u0111eni broj puta.</p> <pre><code>for (let i =  0; i &lt;  5; i++) {\n  console.log(i);\n}\n// Output:  0  1  2  3  4\n</code></pre>"},{"location":"content/intermediate/petlje/#while-loop","title":"While Loop","text":"<p>Petlja <code>while</code> prolazi kroz blok koda dok je navedena tvrdnja istinita.</p> <pre><code>let i =  0;\nwhile (i &lt;  5) {\n  console.log(i);\n  i++;\n}\n// Output:  0  1  2  3  4\n</code></pre>"},{"location":"content/intermediate/petlje/#do-while-loop","title":"Do While Loop","text":"<p>Petlja <code>do...while</code> prvo izvr\u0161ava blok koda, a zatim provjerava uvjet. Ova petlja \u0107e se izvr\u0161iti barem jednom jer provjera uvjeta dolazi nakon izvr\u0161enja bloka koda.</p> <pre><code>let i =  0;\ndo {\n  console.log(i);\n  i++;\n} while (i &lt;  5);\n// Output:  0  1  2  3  4\n</code></pre>"},{"location":"content/intermediate/petlje/#ostale-petlje","title":"Ostale Petlje","text":""},{"location":"content/intermediate/petlje/#forin-loop","title":"For/In Loop","text":"<p>Petlja <code>for...in</code> prolazi kroz svojstva objekta.</p> <pre><code>let person = {firstName:\"John\", lastName:\"Doe\", age:25};\nfor (let property in person) {\n  console.log(property + \": \" + person[property]);\n}\n// Output: firstName: John\n//         lastName: Doe\n//         age:  25\n</code></pre>"},{"location":"content/intermediate/petlje/#forof-loop","title":"For/Of Loop","text":"<p>Petlja <code>for...of</code> prolazi kroz vrijednosti iterabilnog objekta, poput polja.</p> <pre><code>let colors = ['red', 'green', 'blue'];\nfor (let color of colors) {\n  console.log(color);\n}\n// Output: red\n//         green\n//         blue\n</code></pre> <p>Petlje su temeljna konstrukcija u programiranju koja omogu\u0107uje ponavljanje odre\u0111ene akcije. Razli\u010dite vrste petlji omogu\u0107uju fleksibilno rukovanje razli\u010ditim scenarijima, od jednostavnog prolaska kroz niz do slo\u017eenih uvjeta i logike.</p>"},{"location":"content/intermediate/sortiranje%20niza/","title":"Sortiranje niza","text":""},{"location":"content/intermediate/sortiranje%20niza/#sortiranje-nizova","title":"Sortiranje Nizova","text":"<p>JavaScript nudi razne metode za sortiranje nizova. Ove metode omogu\u0107uju sortiranje nizova na osnovu njihovih vrijednosti, obrnutim redoslijedom ili na osnovu specifi\u010dnih kriterija.</p>"},{"location":"content/intermediate/sortiranje%20niza/#metode-sortiranja-nizova","title":"Metode Sortiranja Nizova","text":""},{"location":"content/intermediate/sortiranje%20niza/#array-sort","title":"Array sort()","text":"<p>Sortira elemente niza u alfabetske redoslijede i vra\u0107a sortirani niz.</p> <pre><code>let numbers = [40,  100,  1,  5,  25,  10];\nnumbers.sort((a, b) =&gt; a - b); // [1,  5,  10,  25,  40,  100]\n</code></pre>"},{"location":"content/intermediate/sortiranje%20niza/#array-reverse","title":"Array reverse()","text":"<p>Obr\u0107e redoslijed elemenata unutar niza.</p> <pre><code>let numbers = [1,  2,  3,  4,  5];\nnumbers.reverse(); // [5,  4,  3,  2,  1]\n</code></pre>"},{"location":"content/intermediate/sortiranje%20niza/#mathmin-i-mathmax","title":"Math.min() i Math.max()","text":"<p>Vra\u0107aju najmanji i najve\u0107i element u nizu, respektivno.</p> <pre><code>javascript\nlet numbers = [40,  100,  1,  5,  25,  10];\nconsole.log(Math.min(...numbers)); //  1\nconsole.log(Math.max(...numbers)); //  100\n</code></pre>"},{"location":"content/intermediate/sortiranje%20niza/#home-made-min-i-max","title":"Home Made Min() i Max()","text":"<p>Ru\u010dno implementirane funkcije za pronala\u017eenje najmanjeg i najve\u0107eg elementa u nizu.</p> <pre><code>javascript\nfunction homeMadeMin(arr) {\n    return arr.reduce((min, current) =&gt; current &lt; min ? current : min, Infinity);\n}\n\nfunction homeMadeMax(arr) {\n    return arr.reduce((max, current) =&gt; current &gt; max ? current : max, -Infinity);\n}\n\nlet numbers = [40,  100,  1,  5,  25,  10];\nconsole.log(homeMadeMin(numbers)); //  1\nconsole.log(homeMadeMax(numbers)); //  100\n</code></pre>"},{"location":"content/intermediate/stringovi/","title":"Stringovi i njihove operacije","text":""},{"location":"content/intermediate/stringovi/#concatenation-nizanje-stringova","title":"Concatenation (Nizanje stringova)","text":"<p>Nizanje stringova je proces spajanja dva ili vi\u0161e stringova kako bi se stvorio novi string. U JavaScriptu, to mo\u017eete posti\u0107i koriste\u0107i operator <code>+</code>. Naprimjer:</p> <pre><code>let firstName = \"John\";\nlet lastName = \"Doe\";\nlet fullName = firstName + \" \" + lastName;\nconsole.log(fullName); // Ispisuje \"John Doe\"\n</code></pre>"},{"location":"content/intermediate/stringovi/#template-literals","title":"Template literals ``","text":"<p>Template literals su pobolj\u0161anje u JavaScriptu koje omogu\u0107uje interpolaciju izraza u stringu. Koristite backticks () umjesto navodnika ili apostrofa. Unutar template stringa, mo\u017eete koristiti <code>${}</code> za ubacivanje varijabli ili izraza. Naprimjer:</p> <pre><code>let name = \"Alice\";\nlet greeting = `Hello, ${name}!`;\nconsole.log(greeting); // Ispisuje \"Hello, Alice!\"\n</code></pre>"},{"location":"content/intermediate/stringovi/#manipulacija-stringovima","title":"Manipulacija stringovima","text":""},{"location":"content/intermediate/stringovi/#length-touppercase-tolowercase","title":".length, .toUpperCase(), .toLowerCase()","text":"<p>JavaScript nudi razne korisne metode za manipulaciju stringovima. <code>.length</code> vra\u0107a broj znakova u stringu, <code>.toUpperCase()</code> pretvara sve znakove u velika slova, dok <code>.toLowerCase()</code> pretvara sve znakove u mala slova. Naprimjer:</p> <pre><code>let str = \"Hello, World!\";\nconsole.log(str.length); // Ispisuje duljinu stringa, u ovom slu\u010daju 13\nconsole.log(str.toUpperCase()); // Ispisuje \"HELLO, WORLD!\"\nconsole.log(str.toLowerCase()); // Ispisuje \"hello, world!\"\n</code></pre>"},{"location":"content/intermediate/stringovi/#substring","title":".substring()","text":"<p><code>.substring()</code> metoda se koristi za izdvajanje dijela stringa na temelju indeksa. Prihva\u0107a dva parametra: po\u010detni indeks i zavr\u0161ni indeks. Naprimjer:</p> <pre><code>let str = \"Hello, World!\";\nlet substr = str.substring(7, 12);\nconsole.log(substr); // Ispisuje \"World\"\n</code></pre>"},{"location":"content/intermediate/stringovi/#splituslov","title":".split(uslov)","text":"<p><code>.split()</code> metoda se koristi za razbijanje stringa na niz podstringova na temelju zadanih uslova. Mo\u017eete proslijediti separator kao argument, a rezultat \u0107e biti niz podstringova. Naprimjer:</p> <pre><code>let str = \"apple,banana,orange\";\nlet fruits = str.split(\",\");\nconsole.log(fruits); // Ispisuje [\"apple\", \"banana\", \"orange\"]\n</code></pre>"},{"location":"content/intermediate/uslovi/","title":"Uslovi","text":""},{"location":"content/intermediate/uslovi/#provjere-if-statements-u-javascriptu","title":"Provjere (If Statements) u JavaScriptu","text":"<p>Provjere omogu\u0107uju programima da donose odluke na temelju uslova. U JavaScriptu postoje tri osnovna oblika provjera: <code>if</code>, <code>if...else</code> i <code>switch</code>.</p>"},{"location":"content/intermediate/uslovi/#if-statement","title":"If Statement","text":"<p>Provjerava je li navedeni uslov istinit. Ako je uslov istinit, izvr\u0161ava se blok koda unutar if petlje.</p> <pre><code>let temperature =  30;\nif (temperature &gt;=  30) {\n  console.log(\"It's hot outside!\");\n}\n</code></pre>"},{"location":"content/intermediate/uslovi/#ifelse-statement","title":"If...Else Statement","text":"<p>Provjerava je li navedeni uslov istinit. Ako je uslov istinit, izvr\u0161ava se blok koda unutar if petlje. Ako nije, izvr\u0161ava se blok koda unutar else petlje.</p> <pre><code>let temperature =  20;\nif (temperature &gt;=  30) {\n  console.log(\"It's hot outside!\");\n} else {\n  console.log(\"It's cold outside.\");\n}\n</code></pre>"},{"location":"content/intermediate/uslovi/#switch-statement","title":"Switch Statement","text":"<p>Omogu\u0107uje upore\u0111ivanje jedne promenljive s vi\u0161e mogu\u0107ih vrijednosti. Svaka vrijednost ima svoje blok koda koje se izvr\u0161avaju kada se uslov zadovoljava.</p> <pre><code>let fruit = \"apple\";\nswitch (fruit) {\n  case \"banana\":\n    console.log(\"Bananas are good for healthy living.\");\n    break;\n  case \"apple\":\n    console.log(\"Apples are tasty and crunchy.\");\n    break;\n  default:\n    console.log(\"I like all fruits!\");\n}\n</code></pre>"},{"location":"content/intermediate/uslovi/#ternary-operator","title":"Ternary Operator","text":"<p>Kratka sintaksa za if...else provjeru. Prva vrijednost predstavlja uvjet, druga vrijednost rezultat ako je uvjet istinit, a tre\u0107a vrijednost rezultat ako je uvjet la\u017ean.</p> <pre><code>let age =  15;\nlet beverage = (age &gt;=  21) ? \"Beer\" : \"Juice\";\nconsole.log(beverage); // Juice\n</code></pre>"},{"location":"content/intermediate/uslovi/#razlika-izmeu-i","title":"Razlika izme\u0111u == i ===","text":"<p>Operator <code>==</code> provjerava samo vrijednosti, dok operator <code>===</code> provjerava vrijednosti i tipove. To zna\u010di da <code>==</code> mo\u017ee vratiti <code>true</code> za dvije razli\u010dite vrste podataka, dok <code>===</code> vratit \u0107e <code>false</code>.</p> <pre><code>0 == \"0\"  // true\n0 === \"0\" // false\n</code></pre> <p>Provjere su klju\u010dni deo programerskog jezika jer omogu\u0107uju dinami\u010dko izvr\u0161avanje koda na temelju stanja aplikacije ili uticaja na korisnika.</p>"},{"location":"content/styling/","title":"Stilizacija","text":""},{"location":"content/styling/#cilj","title":"Cilj","text":""},{"location":"content/styling/#uslovi","title":"Uslovi","text":""},{"location":"content/styling/#sadrzaj","title":"Sadr\u017eaj","text":""},{"location":"content/styling/#literatura-i-dodatni-materijali","title":"Literatura i dodatni materijali","text":""},{"location":"content/styling/CSS%20Borderi/","title":"CSS Borders","text":"<p>CSS Borders svojstvo vam omogu\u0107ava da odredite stil, \u0161irinu i boju ivice elementa.</p> <p></p>"},{"location":"content/styling/CSS%20Borderi/#css-border-stilovi","title":"CSS Border stilovi","text":"<p>Svojstvo border-style specificira koju vrstu bordera treba prikazati.</p> <p>Naj\u010de\u0161\u0107e se koriste sljede\u0107i stilovi:</p> <ul> <li>dotted - Definira ta\u010dkastu ivicu</li> <li>dashed - Definira isprekidanu ivicu</li> <li>solid - Definira solid/klasi\u010dnu ivicu</li> <li>double - Definira dvostruku ivicu</li> <li>groove - Definira 3D ivicu. Efekat zavisi od vrijednosti boje granice</li> <li>ridge - Definira 3D izbo\u010deni rub. Efekat zavisi od vrijednosti boje granice</li> <li>inset - Definira 3D inset granicu. Efekat zavisi od vrij ednosti boje granice</li> <li>outset - Definira 3D outset granicu. Efekat zavisi od vrijednosti boje granice</li> <li>none - bez bordera</li> <li>hidden - Definira skrivenu granicu</li> </ul> <p>Svojstvo border-style mo\u017ee imati od jedne do \u010detiri vrijednosti (za gornju ivicu, desnu ivicu, donju i lijevu ivicu).</p> <p>Primjer:</p> <p> </p>"},{"location":"content/styling/CSS%20Borderi/#_1","title":"CSS Borders","text":""},{"location":"content/styling/CSS%20Borderi/#css-sirina-bordera","title":"CSS \u0161irina bordera","text":"<p>Svojstvo border-width specificira \u0161irinu \u010detiri ivice.</p> <p>\u0160irina se mo\u017ee postaviti kao odre\u0111ena veli\u010dina (u px, pt, cm, em, itd.) ili kori\u0161tenjem jedne od tri unaprijed definirane vrijednosti: tanko, srednje ili debelo:</p> <p> </p>"},{"location":"content/styling/CSS%20Borderi/#_2","title":"CSS Borders","text":""},{"location":"content/styling/CSS%20Borderi/#boja-bordera","title":"Boja bordera","text":"<p>Svojstvo border-color se koristi za postavljanje boje \u010detiri ivice.</p> <p>Boja se mo\u017ee podesiti na sljede\u0107i na\u010din:</p> <ul> <li>name - specifi\u010dno ime boje, npr \"red\"</li> <li>HEX - specifi\u010dna HEX vrijednost, kao \"#ff0000\"</li> <li>RGB - specifi\u010dna RGB vrijednost, kao \"rgb(255,0,0)\"</li> <li>HSL - specifi\u010dna HSL vrijednost, kao \"hsl(0, 100%, 50%)\"</li> <li>transparent</li> </ul> <p> </p>"},{"location":"content/styling/CSS%20Borderi/#css-zaobljena-granica","title":"CSS zaobljena granica","text":"<p>Svojstvo border-radius se koristi za dodavanje zaobljenih granica elementu:</p> <p> </p>"},{"location":"content/styling/CSS%20Box%20Model/","title":"CSS Box Model","text":"<p>Svi HTML elementi se mogu smatrati kao jedan 'box'.</p> <p>U CSS-u se termin \"box model\" koristi kada se govori o dizajnu i izgledu.</p> <p>Model CSS okvira je u su\u0161tini kutija koja obavija svaki HTML element. Sastoji se od: sadr\u017eaja, paddinga, ivica i margina. Slika ispod ilustruje box model:</p> <p></p> <p>Obja\u0161njenje razli\u010ditih dijelova:</p> <ul> <li>Content - Sadr\u017eaj okvira u kojem se pojavljuju tekst i slike</li> <li>Padding - Bri\u0161e podru\u010dje oko sadr\u017eaja. Podloga je prozirna</li> <li>Border - Granica koja se kre\u0107e oko paddinga i sadr\u017eaja</li> <li>Margin - Bri\u0161e podru\u010dje izvan margine. Margina je transparentna Box model nam omogu\u0107ava da dodamo ivicu oko elemenata i da definiramo razmak izme\u0111u elemenata.</li> </ul> <p></p>"},{"location":"content/styling/CSS%20Box%20Model/#sirina-i-visina-elementa","title":"\u0160irina i visina elementa","text":"<p>Da biste pravilno postavili \u0161irinu i visinu elementa u svim pretra\u017eiva\u010dima, morate znati kako radi box model.</p> <p>*Kada postavite svojstva \u0161irine i visine elementa pomo\u0107u CSS-a, samo postavljate \u0161irinu i visinu podru\u010dja sadr\u017eaja. Da biste izra\u010dunali ukupnu \u0161irinu i visinu elementa, morate uklju\u010diti i padding i bordere.</p> <p></p> <p>Primjer izra\u010dunavanja:</p> <p>Ukupna \u0161irina elementa se izra\u010dunava na sljede\u0107i na\u010din:</p> <p>Ukupna \u0161irina elementa = width + left padding + right padding + left border + right border</p> <p>Ukupna visina elementa se izra\u010dunava na sljede\u0107i na\u010din:</p> <p>Ukupna visina elementa = height + top padding + bottom padding + top border + bottom border</p>"},{"location":"content/styling/CSS%20Height%2C%20Width%2C%20Max-Width/","title":"CSS Height, Width i Max-width","text":"<p>CSS svojstva height i width se koriste za postavljanje visine i \u0161irine elementa.</p> <p>CSS svojstvo max-width se koristi za postavljanje maksimalne \u0161irine elementa.</p> <p></p>"},{"location":"content/styling/CSS%20Height%2C%20Width%2C%20Max-Width/#css-podesavanje-visine-i-sirine","title":"CSS pode\u0161avanje visine i \u0161irine","text":"<p>Svojstva visine i \u0161irine ne uklju\u010duju padding, ivice ili margine. Postavlja visinu/\u0161irinu podru\u010dja unutar paddinga, ivice i margine elementa.</p>"},{"location":"content/styling/CSS%20Height%2C%20Width%2C%20Max-Width/#css-vrijednosti-sirine-i-visine","title":"CSS vrijednosti \u0161irine i visine","text":"<p>Svojstva visine i \u0161irine mogu imati sljede\u0107e vrijednosti:</p> <ul> <li>auto - Ovo je podrazumijevano. Pretra\u017eiva\u010d izra\u010dunava visinu i \u0161irinu</li> <li>length - Defini\u0161e visinu/\u0161irinu u px, cm, itd.</li> <li>% - Definira visinu/\u0161irinu u procentima bloka koji sadr\u017ei</li> <li>intial - Postavlja visinu/\u0161irinu na zadanu vrijednost</li> <li>inherit - Visina/\u0161irina \u0107e biti naslije\u0111ena od svoje parent vrijednosti</li> </ul> <p> </p>"},{"location":"content/styling/CSS%20Height%2C%20Width%2C%20Max-Width/#podesavanje-maksimalne-sirine","title":"Pode\u0161avanje maksimalne \u0161irine","text":"<p>Svojstvo max-width se koristi za postavljanje maksimalne \u0161irine elementa.</p> <p>Maksimalna \u0161irina se mo\u017ee specificirati u vrijednostima du\u017eine, poput px, cm, itd., ili u procentima (%) bloka koji sadr\u017ei, ili postaviti na ni\u0161ta (ovo je zadano. Zna\u010di da ne postoji maksimalna \u0161irina).</p> <p>Problem sa  iznad se javlja kada je prozor pretra\u017eiva\u010da manji od \u0161irine elementa (500px). Pregleda\u010d zatim dodaje horizontalnu traku za pomicanje na stranicu. <p>Kori\u0161tenje maksimalne \u0161irine umjesto toga, u ovoj situaciji, pobolj\u0161at \u0107e rukovanje pretra\u017eiva\u010dem sa malim prozorima.</p> <p></p> <p></p>"},{"location":"content/styling/CSS%20Margine/","title":"CSS Margine","text":"<p>Margine se koriste za stvaranje prostora oko elemenata, izvan bilo kakvih definiranih granica.</p> <p></p> <p>Sa CSS-om imamo potpunu kontrolu nad marginama. Postoje svojstva za postavljanje margine za svaku stranu elementa (gore, desno, dole i lijevo).</p>"},{"location":"content/styling/CSS%20Margine/#margina-pojedinacne-strane","title":"Margina - pojedina\u010dne strane","text":"<p>CSS ima svojstva za odre\u0111ivanje margine za svaku stranu elementa:</p> <ul> <li>margin-top</li> <li>margin-right</li> <li>margin-bottom</li> <li> <p>margin-left Sva svojstva margina mogu imati sljede\u0107e vrijednosti:</p> </li> <li> <p>auto - pretra\u017eiva\u010d izra\u010dunava marginu</p> </li> <li>length - odre\u0111uje marginu u px, pt, cm, itd.</li> <li>% - specificira marginu u % \u0161irine elementa koji sadr\u017ei</li> <li>inherit - specificira da margina treba biti naslije\u0111ena od parent elementa</li> </ul> <p>Tip: Negativne vrijednosti su dozvoljene.</p> <p></p>"},{"location":"content/styling/CSS%20Padding/","title":"CSS Padding","text":"<p>CSS svojstvo padding se koristi za generisanje prostora oko sadr\u017eaja elemenata, unutar definiranog okvira.</p> <p>Sa CSS-om, imamo potpunu kontrolu nad paddingom. Postoje svojstva za postavljanje paddinga za svaku stranu elementa (gore, desno, dolje i lijevo). </p>"},{"location":"content/styling/CSS%20Padding/#padding-pojedinacne-strane","title":"Padding - pojedina\u010dne strane","text":"<p>CSS ima svojstva za odre\u0111ivanje paddinga za svaku stranu elementa:</p> <ul> <li>padding-top</li> <li>padding-right</li> <li>padding-bottom</li> <li> <p>padding-left Sva svojstva paddinga mogu imati sljede\u0107e vrijednosti:</p> </li> <li> <p>length - odre\u0111uje padding u px, pt, cm, itd.</p> </li> <li>% - specificira padding u % \u0161irine elementa koji sadr\u017ei</li> <li>inherit - specificira da padding treba biti naslije\u0111en od parent elementa</li> </ul> <p>Tip: Negativne vrijednosti nisu dozvoljene.</p> <p></p>"},{"location":"content/styling/CSS%20Padding/#padding-i-sirina-elemenata","title":"Padding i \u0161irina elemenata","text":"<p>Svojstvo \u0161irine CSS-a specificira \u0161irinu podru\u010dja sadr\u017eaja elementa. Podru\u010dje sadr\u017eaja je dio unutar paddinga, ivice i margine elementa (model okvira).</p> <p>Dakle, ako element ima navedenu \u0161irinu, padding dodan tom elementu \u0107e se dodati ukupnoj \u0161irini elementa. Ovo je \u010desto nepo\u017eeljan rezultat.</p> <p></p> <p>Da biste zadr\u017eali \u0161irinu na 300px, bez obzira na koli\u010dinu paddinga, mo\u017eete koristiti svojstvo box-sizing. Ovo omogu\u0107ava da element zadr\u017ei svoju stvarnu \u0161irinu; ako pove\u0107ate padding, dostupni prostor sadr\u017eaja \u0107e se smanjiti.</p> <p></p>"},{"location":"content/styling/CSS%20Text/","title":"CSS Text","text":"<p>CSS ima mnogo svojstava za formatiranje teksta.</p> <p></p>"},{"location":"content/styling/CSS%20Text/#boja-teksta","title":"Boja teksta","text":"<p>Svojstvo 'color' se koristi za postavljanje boje teksta. Boja je odre\u0111ena prema:</p> <p>nazivu boje - kao \"red\" HEX vrijednosti - poput \"#ff0000\" RGB vrijednosti - poput \"rgb(255,0,0)\"</p> <p>Zadana boja teksta za stranicu definirana je u body selectoru.</p> <p></p>"},{"location":"content/styling/CSS%20Text/#boja-teksta-i-boja-pozadine","title":"Boja teksta i boja pozadine","text":"<p>U ovom primjeru definiramo i svojstvo 'background-color' i svojstvo 'color':</p> <p></p>"},{"location":"content/styling/CSS%20Text/#css-poravnanje-teksta","title":"CSS poravnanje teksta","text":"<p>Svojstvo 'text-align' se koristi za postavljanje horizontalnog poravnanja teksta.</p> <p>Tekst mo\u017ee biti poravnat lijevo ili desno, centriran ili justified.</p> <p>Sljede\u0107i primjer prikazuje poravnanje po sredini, te lijevo i desno poravnat tekst (lijevo poravnanje je zadano ako je smjer teksta s lijeva na desno, a desno poravnanje je zadano ako je smjer teksta zdesna nalijevo):</p> <p></p> <p>Kada je svojstvo text-align postavljeno na \"justify\", svaki red se raste\u017ee tako da svaki red ima jednaku \u0161irinu, a lijeva i desna margina su ravne:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#vertical-alignment","title":"Vertical Alignment","text":"<p>Svojstvo 'vertical-align' postavlja vertikalno poravnanje elementa.</p> <p></p>"},{"location":"content/styling/CSS%20Text/#_1","title":"CSS Text","text":""},{"location":"content/styling/CSS%20Text/#css-text-dekoracija","title":"CSS Text dekoracija","text":""},{"location":"content/styling/CSS%20Text/#_2","title":"CSS Text","text":"<p>Dodavanje ukrasne linije na tekstu</p>"},{"location":"content/styling/CSS%20Text/#_3","title":"CSS Text","text":"<p>Svojstvo text-decoration-line se koristi za dodavanje ukrasne linije tekstu.</p> <p>*Mo\u017eete kombinirati vi\u0161e od jedne vrijednosti, kao \u0161to su precrtavanje i podvla\u010denje da biste prikazali linije i iznad i ispod teksta.</p> <p></p>"},{"location":"content/styling/CSS%20Text/#the-shorthand-property","title":"The Shorthand Property","text":"<p>Svojstvo text-decoration je skra\u0107eno svojstvo za:</p> <ul> <li>text-decoration-line (obavezno)</li> <li>text-decoration-color (opciono)</li> <li>text-decoration-style (opciono)</li> <li>text-decoration-thickness (opciono)</li> </ul> <p></p>"},{"location":"content/styling/CSS%20Text/#_4","title":"CSS Text","text":""},{"location":"content/styling/CSS%20Text/#transformacija-teksta","title":"Transformacija teksta","text":"<p>Svojstvo text-transform se koristi za odre\u0111ivanje velikih i malih slova u tekstu.</p> <p>Mo\u017ee se koristiti za pretvaranje u velika ili mala slova, ili za veliko po\u010detno slovo svake rije\u010di:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#css-text-spacing","title":"CSS Text Spacing","text":""},{"location":"content/styling/CSS%20Text/#_5","title":"CSS Text","text":"<p>Text Indentation</p>"},{"location":"content/styling/CSS%20Text/#_6","title":"CSS Text","text":"<p>Svojstvo text-indent se koristi za uvla\u010denja prvog reda teksta:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#razmak-izmeu-slova","title":"Razmak izme\u0111u slova","text":"<p>Svojstvo razmaka slova koristi se za odre\u0111ivanje razmaka izme\u0111u znakova u tekstu.</p> <p>Sljede\u0107i primjer pokazuje kako pove\u0107ati ili smanjiti razmak izme\u0111u znakova:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#line-height","title":"Line-height","text":"<p>Svojstvo line-height se koristi za odre\u0111ivanje razmaka izme\u0111u redova:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#razmak-rijeci","title":"Razmak rije\u010di","text":"<p>Svojstvo word-spacing koristi se za odre\u0111ivanje razmaka izme\u0111u rije\u010di u tekstu.</p> <p>Sljede\u0107i primjer pokazuje kako pove\u0107ati ili smanjiti razmak izme\u0111u rije\u010di:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#bijeli-prostor","title":"Bijeli prostor","text":"<p>Svojstvo white-space omogu\u0107ava pode\u0161avanje razmaka unutar elementa.</p> <p>Ovaj primjer pokazuje kako onemogu\u0107iti prelamanje teksta unutar elementa:</p> <p></p>"},{"location":"content/styling/CSS%20Text/#text-shadow","title":"Text Shadow","text":"<p>Svojstvo text-shadow dodaje sjenku tekstu.</p> <p>U njegovoj najjednostavnijoj upotrebi, odre\u0111ujete samo horizontalnu sjenku (2px) i vertikalnu sjenku (2px):</p> <p></p> <p>Zatim dodajte boju (crvenu) sjeni:</p> <p></p> <p>Zatim dodajte efekat zamu\u0107enja (5px) sjenci:</p> <p></p> <p>Jo\u0161 primjera:</p> <p> </p>"},{"location":"content/styling/CSS%20boje/","title":"CSS boje","text":"<p>Boje su odre\u0111ene kori\u0161tenjem unaprijed definiranih naziva boja ili RGB, Hex, HSL, RGBA, HSLA vrijednosti.</p>"},{"location":"content/styling/CSS%20boje/#_1","title":"CSS boje","text":"<p>CSS imena boja</p>"},{"location":"content/styling/CSS%20boje/#_2","title":"CSS boje","text":"<p>U CSS-u se boja mo\u017ee odrediti pomo\u0107u unaprijed definiranog naziva boje:</p> <p></p>"},{"location":"content/styling/CSS%20boje/#_3","title":"CSS boje","text":"<p>CSS boja pozadine</p>"},{"location":"content/styling/CSS%20boje/#_4","title":"CSS boje","text":"<p>Mo\u017eete postaviti boju pozadine za HTML elemente:</p> <p></p>"},{"location":"content/styling/CSS%20boje/#_5","title":"CSS boje","text":"<p>CSS boja teksta</p>"},{"location":"content/styling/CSS%20boje/#_6","title":"CSS boje","text":"<p>Mo\u017eete postaviti boju teksta:</p> <p></p>"},{"location":"content/styling/CSS%20boje/#_7","title":"CSS boje","text":"<p>CSS boja bordera</p>"},{"location":"content/styling/CSS%20boje/#_8","title":"CSS boje","text":"<p>Mo\u017eete postaviti boju bordera:</p> <p></p>"},{"location":"content/styling/CSS%20boje/#_9","title":"CSS boje","text":"<p>CSS vrijednost boja</p>"},{"location":"content/styling/CSS%20boje/#_10","title":"CSS boje","text":"<p>U CSS se boje mogu precizirati i pomo\u0107u RGB vrijednosti, hex vrijednosti, HSL vrijednosti, RGBA vrijednosti i HSLA vrijednosti:</p> <p></p> <p></p>"},{"location":"content/styling/CSS%20komentari/","title":"CSS komentari","text":"<p>CSS komentari se ne prikazuju u pretra\u017eiva\u010du, ali mogu pomo\u0107i u dokumentu va\u0161eg izvornog koda.</p>"},{"location":"content/styling/CSS%20komentari/#_1","title":"CSS komentari","text":"<p>Komentari se koriste za obja\u0161njenje koda i to mo\u017ee pomo\u0107i kada kasnije ure\u0111ujete izvorni kod.</p> <p>CSS komentar postavljen je unutar"},{"location":"content/styling/CSS%20pozadina/","title":"CSS pozadina","text":"<p>U ovom poglavlju nau\u010dit \u0107ete o sljede\u0107im CSS pozadinskim svojstvima:</p> <pre><code>background-color\nbackground-image\nbackground-repeat\nbackground-attachment\nbackground-position\nbackground (skra\u0107eno svojstvo)\n</code></pre>"},{"location":"content/styling/CSS%20pozadina/#_1","title":"CSS pozadina","text":"<p>CSS Boja pozadine</p>"},{"location":"content/styling/CSS%20pozadina/#_2","title":"CSS pozadina","text":"<p>'Background-color' svojstvo odre\u0111uje pozadinsku boju elementa.</p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#_3","title":"CSS pozadina","text":"<p>Ostali elementi</p>"},{"location":"content/styling/CSS%20pozadina/#_4","title":"CSS pozadina","text":"<p>Mo\u017eete postaviti boju pozadine za bilo koji HTML elemenat:</p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#_5","title":"CSS pozadina","text":"<p>Opacity / Transparency</p>"},{"location":"content/styling/CSS%20pozadina/#_6","title":"CSS pozadina","text":"<p>'Opacity' svojstvo odre\u0111uje neprozirnost / transparentnost elementa.</p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#css-pozadinska-slika","title":"CSS pozadinska slika","text":"<p>Svojstvo background-image predstavlja sliku koja se koristi kao pozadina elementa.</p> <p>Slika se ponavlja tako da pokriva cijeli element.</p> <p></p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#_7","title":"CSS pozadina","text":"<p>Pozadinska slika se tako\u0111er mo\u017ee postaviti za odre\u0111ene elemente, kao \u0161to je element <p>:</p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#css-ponavljanje-pozadinske-slike","title":"CSS ponavljanje pozadinske slike","text":"<p>Po defaultu, svojstvo background-image ponavlja sliku i horizontalno i vertikalno.</p> <p>Neke slike treba ponavljati samo vodoravno ili okomito, ina\u010de \u0107e izgledati \u010dudno.</p> <p>Primjer u kojem sliku ponavljamo samo horizintalno: </p> <p>A \u0161ta ako \u017eelimo da ne ponavljamo pozadinu?</p> <p>Vrlo jednostavno!  Samo iskoristimo svojstvo no-repeat:</p> <p></p>"},{"location":"content/styling/CSS%20pozadina/#_8","title":"CSS pozadina","text":""},{"location":"content/styling/CSS%20pozadina/#css-pozicija-pozadine","title":"CSS pozicija pozadine","text":"<p>Svojstvo background-position se koristi za odre\u0111ivanje polo\u017eaja pozadinske slike.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/","title":"CSS selektori","text":"<p>CSS selektor vr\u0161i odabir HTML elemenata koje \u017eelite stilizirati.</p> <p>CSS selektori se koriste za \"pronala\u017eenje\" (ili odabir) HTML elemenata koje \u017eelite stilizirati.</p> <p>CSS selektore mo\u017eemo podijeliti u pet kategorija:</p> <pre><code>- Jednostavni selektori (odaberete elemente na osnovu imena, ID-a, klase)\n- Selektori kombinatora (odaberete elemente na osnovu specifi\u010dnog odnosa izme\u0111u njih)\n- Selektori pseudoklasa (odabir elemenata na osnovu odre\u0111enog stanja)\n- Selektori pseudoelemenata (odaberete i stilizirate dio elementa)\n- Selektori atributa (odaberete elemente na osnovu atributa ili vrijednosti atributa)\n</code></pre> <p>Selektor elemenata bira HTML elemente na osnovu naziva elementa.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/#_1","title":"CSS selektori","text":"<p>CSS id selektor</p>"},{"location":"content/styling/CSS%20selektori/#_2","title":"CSS selektori","text":"<p>Selektor id koristi atribut id HTML elementa za odabir odre\u0111enog elementa.</p> <p>ID elementa je jedinstven unutar stranice, tako da se id selektor koristi za odabir jednog jedinstvenog elementa.</p> <p>Da biste odabrali element sa odre\u0111enim ID-om, upi\u0161ite znak hash (#), nakon \u010dega slijedi id elemenat.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/#_3","title":"CSS selektori","text":"<p>CSS class selektor</p>"},{"location":"content/styling/CSS%20selektori/#_4","title":"CSS selektori","text":"<p>Selektor klase bira HTML elemente sa specifi\u010dnim atributom klase.</p> <p>Da biste odabrali elemente sa odre\u0111enom klasom, napi\u0161ete znak ta\u010dke (.), nakon \u010dega slijedi naziv klase.</p> <p></p> <p>Tako\u0111er mo\u017eete odrediti da klasa treba da uti\u010de samo na odre\u0111ene HTML elemente.</p> <p></p> <p>HTML elementi se tako\u0111er mogu odnositi na vi\u0161e od jedne klase.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/#_5","title":"CSS selektori","text":"<p>CSS univerzalni selektor</p>"},{"location":"content/styling/CSS%20selektori/#_6","title":"CSS selektori","text":"<p>Univerzalni selektor (*) odabire sve HTML elemente na stranici.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/#_7","title":"CSS selektori","text":"<p>CSS grupisanje selektora</p>"},{"location":"content/styling/CSS%20selektori/#_8","title":"CSS selektori","text":"<p>Selektor grupisanja bira sve HTML elemente sa istim definicijama stila.</p> <p>Pogledajte sljede\u0107i CSS kod (elementi h1, h2 i p imaju iste definicije stila): </p> <p>Da bi se kod minimizirao, grupisanje je odli\u010dna opcija.</p> <p>Da biste grupisali selektore, odvojite svaki selektor zarezom.</p> <p></p>"},{"location":"content/styling/CSS%20selektori/#_9","title":"CSS selektori","text":"<p>SUMIRANJE:</p>"},{"location":"content/styling/CSS%20selektori/#_10","title":"CSS selektori","text":""},{"location":"content/styling/CSS%20sintaksa/","title":"CSS sintaksa","text":"<p>CSS pravilo se sastoji od selektora i bloka deklaracije.</p> <p></p> <p>Selektor pokazuje na HTML element koji \u017eelite stilizirati.</p> <p>Blok deklaracije sadr\u017ei jednu ili vi\u0161e deklaracija odvojenih ta\u010dkom i zarezom.</p> <p>Svaka deklaracija uklju\u010duje ime CSS svojstva i vrijednost, odvojenu dvota\u010dkom.</p> <p>Vi\u0161e CSS deklaracija je odvojeno ta\u010dkom i zarezom, a blokovi deklaracija su okru\u017eeni viti\u010dastim zagradama.</p>"},{"location":"content/styling/CSS%20sintaksa/#_1","title":"CSS sintaksa","text":""},{"location":"content/styling/Cilj/","title":"Cilj","text":"<p>Cilj u\u010denja CSS-a jeste da nau\u010dite kako vizualno oblikovati web stranice. CSS daje vam kontrolu nad izgledom stranice, uklju\u010duju\u0107i boje, fontove, razmake, pozadinu, granice, raspored i animacije.</p> <p>Evo nekih specifi\u010dnijih ciljeva koji se mogu posti\u0107i u\u010denjem CSS-a:</p> <ul> <li>Kreiraj profesionalne i atraktivne web stranice: Sa solidnim znanjem CSS-a, mo\u017ee\u0161 dizajnirati stranice koje su vizualno ugodne i prilago\u0111ene tvom brendu ili projektu.</li> <li>Pobolj\u0161aj user experience: Dobro kori\u0161\u0107en CSS mo\u017ee u\u010diniti web stranicu lak\u0161om za navigaciju i interakciju, \u0161to dovodi do boljeg user experience-a.</li> <li>\u0160tedi vrijeme i trud: Odvajanjem sadr\u017eaja od stila, CSS omogu\u0107ava lak\u0161e a\u017euriranje izgleda web stranice bez potrebe za promjenama u HTML kodu.</li> <li>Otvori vrata ka naprednijem web dizajnu: CSS je temelj za u\u010denje naprednijih web dizajn tehnika, kao \u0161to su responzivni dizajn i animacije.</li> </ul> <p></p> <p>Ukratko, u\u010denje CSS-a daje ti mo\u0107 da kreira\u0161 web stranice koje su lijepe, funkcionalne i dostupne.</p>"},{"location":"content/styling/Dodatni%20materijali/","title":"Literatura i dodatni materijali","text":"<p>U prilogu su dodatni linkovi na kojima mo\u017eete u\u010diti i vje\u017ebati CSS:</p> <p>https://www.w3schools.com/css/default.asp</p> <p>https://developer.mozilla.org/en-US/docs/Web/CSS</p> <p>https://web.dev/learn/css</p> <p>https://css-tricks.com/</p> <p>https://tailwindcss.com/</p> <p>https://www.codecademy.com/learn/learn-css</p> <p>Dodatni video materijali:</p> <p>https://www.youtube.com/watch?v=OXGznpKZ_sA</p> <p>https://www.youtube.com/watch?v=qKoajPPWpmo&amp;list=PLr6-GrHUlVf8JIgLcu3sHigvQjTw_aC9C</p> <p>https://www.youtube.com/watch?v=wRNinF7YQqQ</p> <p>https://www.youtube.com/watch?v=Qhaz36TZG5Y</p> <p>https://www.youtube.com/watch?v=1Rs2ND1ryYc</p>"},{"location":"content/styling/Kako%20dodati%20CSS/","title":"Kako dodati CSS","text":"<p>Kada pretra\u017eiva\u010d pro\u010dita style sheet, on \u0107e formatirati HTML dokument u skladu sa informacijama u style sheetu.</p>"},{"location":"content/styling/Kako%20dodati%20CSS/#_1","title":"Kako dodati CSS","text":"<p>Tri na\u010dina za umetanje CSS-a</p>"},{"location":"content/styling/Kako%20dodati%20CSS/#_2","title":"Kako dodati CSS","text":"<p>Postoje tri na\u010dina umetanja:</p> <pre><code> -Eksterni CSS\n -Interni CSS\n -Inline CSS\n</code></pre>"},{"location":"content/styling/Kako%20dodati%20CSS/#_3","title":"Kako dodati CSS","text":"<p>Eksterni CSS</p>"},{"location":"content/styling/Kako%20dodati%20CSS/#_4","title":"Kako dodati CSS","text":"<p>Pomo\u0107u eksternog CSS-a mo\u017eete promijeniti izgled cijele web stranice promjenom samo jedne datoteke!</p> <p>Svaka HTML stranica mora sadr\u017eavati referencu na eksternu datoteku sa style sheetom unutar elementa , unutar odjeljka zaglavlja.</p> <p></p> <p>Eksterni style sheet se mo\u017ee napisati u bilo kojem ure\u0111iva\u010du teksta i mora biti sa\u010duvan sa ekstenzijom .css.</p> <p>Eksterna .css datoteka ne bi trebala sadr\u017eavati nikakve HTML oznake.</p> <p>Evo kako izgleda datoteka \"mystyle.css\":</p> <p></p>"},{"location":"content/styling/Kako%20dodati%20CSS/#_5","title":"Kako dodati CSS","text":"<p>Interni CSS</p>"},{"location":"content/styling/Kako%20dodati%20CSS/#_6","title":"Kako dodati CSS","text":"<p>Interni style sheet mo\u017ee se koristiti ako jedna HTML stranica ima jedinstven stil.</p> <p>Interni stil je definiran unutar"},{"location":"content/styling/Uvod%20CSS/","title":"Uvod u CSS","text":"<p>CSS (Cascading Style Sheets) je jezik koji se koristi za vizuelno oblikovanje web stranica. Uz HTML, koji definira strukturu i sadr\u017eaj web stranice, CSS se koristi za kontrolu izgleda te stranice.</p> <p>Neki od aspekata koje CSS kontrolira:</p> <pre><code>Boje: Boja teksta, pozadine, granica i drugih elemenata\nFontovi: Vrsta fonta, veli\u010dina, te\u017eina, stil\nRazmak: Margine, praznine, poravnanje\nPozadina: Slike, gradijenti, boje\nGranice: Debljina, stil, boja\nRaspored: Pozicioniranje elemenata na stranici\nAnimacije: Vizualni efekti i tranzicije\n</code></pre> <p>Prednosti kori\u0161tenja CSS-a:</p> <pre><code>Odvajanje sadr\u017eaja od stila: Omogu\u0107ava lak\u0161e upravljanje izgledom web stranice\nJednostavno a\u017euriranje: Promjene u stilu se mogu lako implementirati na vi\u0161e stranica\nPobolj\u0161ana dostupnost: Omogu\u0107ava bolju kontrolu nad izgledom web stranice za razli\u010dite ure\u0111aje i korisnike\nPove\u0107ana atraktivnost: Vizualno privla\u010dnije web stranice\n</code></pre> <p>Na\u010dini kori\u0161tenja CSS-a:</p> <pre><code>Umetnutanje CSS stila unutar HTML elementa: Koristi se za inline stilove\nUmetnutanje CSS stila unutar head elementa: Koristi se za interne stilove\nPovezati vanjsku CSS datoteku: Koristi se za eksterne stilove\n</code></pre> <p></p>"},{"location":"content/styling/Uvod%20u%20CSS%20-%20Introduction/","title":"Uvod u CSSOvo je naslov","text":"<p>CSS je jezik koji koristimo za stiliziranje web stranice.</p> <p>\u0160ta je CSS?</p> <pre><code> CSS je skra\u0107enica od Cascading Style Sheets.\n CSS opisuje kako \u0107e HTML elementi biti prikazani na ekranu.\n CSS \u0161tedi mnogo vremena. Mo\u017ee kontrolirati izgled vi\u0161e web stranica odjednom.\n Eksterni stilovi se pohranjuju u CSS fajlovima.\n</code></pre> <p>CSS Demo prikaz - vi\u0161e stilova na jednoj stranici:</p> <p>https://www.w3schools.com/css/demo_default.htm</p> <p>Za\u0161to koristimo CSS?</p> <p>CSS se koristi za definisanje stilova za va\u0161e web stranice, uklju\u010duju\u0107i dizajn, izgled i varijacije u prikazu za razli\u010dite ure\u0111aje i veli\u010dine ekrana.</p> <p></p> <p>HTML nije trebao sadr\u017eavati oznake za formatiranje web stranice!</p> <p>HTML je kreiran da opi\u0161e sadr\u017eaj web stranice, na primjer:</p> <p>Ovo je pasus.</p> <p>Kada su oznake poput  i atributi boje dodani u HTML, to je predstavljalo problem za web programere. Razvoj velikih web stranica, gdje su fontovi i informacije o boji dodani na svaku stranicu, postao je dug proces. <p>Da bi rije\u0161io ovaj problem, World Wide Web Consortium (W3C) je kreirao CSS.</p> <p>CSS je uklonio stilsko oblikovanje sa HTML stranice.</p>"},{"location":"content/styling/Uvod%20u%20CSS%20-%20Introduction/#_1","title":"Uvod u CSS","text":"<p>CSS \u0161tedi puno vremena!</p> <p>Definicije stilova se obi\u010dno \u010duvaju u vanjskim .css datotekama.</p> <p>Sa eksternom datotekom, mo\u017eete promijeniti izgled cijele web stranice promjenom samo jedne datoteke!</p>"}]}